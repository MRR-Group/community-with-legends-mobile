// Mocks generated by Mockito 5.4.6 from annotations
// in community_with_legends_mobile/test/features/auth/data/repositories/auth_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:community_with_legends_mobile/database/app_database.dart'
    as _i3;
import 'package:community_with_legends_mobile/src/features/auth/data/data_sources/auth_data_source.dart'
    as _i4;
import 'package:community_with_legends_mobile/src/features/profile/domain/models/hardware_model.dart'
    as _i9;
import 'package:community_with_legends_mobile/src/shared/data/data_sources/local/local_user_data_source_impl.dart'
    as _i8;
import 'package:community_with_legends_mobile/src/shared/data/data_sources/remote/remote_user_data_source_impl.dart'
    as _i7;
import 'package:community_with_legends_mobile/src/shared/domain/models/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppDatabase_1 extends _i1.SmartFake implements _i3.AppDatabase {
  _FakeAppDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthDataSource extends _i1.Mock implements _i4.AuthDataSource {
  MockAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get rootPem => (super.noSuchMethod(
        Invocation.getter(#rootPem),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#rootPem),
        ),
      ) as String);

  @override
  _i6.Future<Map<String, dynamic>> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> register(
    String? email,
    String? name,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            name,
            password,
          ],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  void sendResetToken(String? email) => super.noSuchMethod(
        Invocation.method(
          #sendResetToken,
          [email],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetPassword({
    required String? email,
    required String? token,
    required String? password,
    required String? passwordConfirmation,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #email: email,
            #token: token,
            #password: password,
            #passwordConfirmation: passwordConfirmation,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> setPassword({
    required String? password,
    required String? passwordConfirmation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPassword,
          [],
          {
            #password: password,
            #passwordConfirmation: passwordConfirmation,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<Map<String, dynamic>> postRequest({
    Map<String, dynamic>? body = const {},
    required String? urlPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [],
          {
            #body: body,
            #urlPath: urlPath,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> deleteRequest({required String? urlPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRequest,
          [],
          {#urlPath: urlPath},
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> getRequest({
    required String? urlPath,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [],
          {
            #urlPath: urlPath,
            #queryParams: queryParams,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [UserDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDataSourceImpl extends _i1.Mock
    implements _i7.UserDataSourceImpl {
  MockUserDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  String get rootPem => (super.noSuchMethod(
        Invocation.getter(#rootPem),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#rootPem),
        ),
      ) as String);

  @override
  _i6.Future<_i2.User> getUserById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.User>);

  @override
  _i6.Future<_i2.User> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i6.Future<_i2.User>);

  @override
  _i6.Future<Map<String, dynamic>> reportUser(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #reportUser,
          [userId],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> banUser(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #banUser,
          [userId],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> postRequest({
    Map<String, dynamic>? body = const {},
    required String? urlPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postRequest,
          [],
          {
            #body: body,
            #urlPath: urlPath,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> deleteRequest({required String? urlPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRequest,
          [],
          {#urlPath: urlPath},
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<Map<String, dynamic>> getRequest({
    required String? urlPath,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [],
          {
            #urlPath: urlPath,
            #queryParams: queryParams,
          },
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [LocalUserDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalUserDataSourceImpl extends _i1.Mock
    implements _i8.LocalUserDataSourceImpl {
  MockLocalUserDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AppDatabase get localDatabase => (super.noSuchMethod(
        Invocation.getter(#localDatabase),
        returnValue: _FakeAppDatabase_1(
          this,
          Invocation.getter(#localDatabase),
        ),
      ) as _i3.AppDatabase);

  @override
  void cacheUser(_i2.User? user) => super.noSuchMethod(
        Invocation.method(
          #cacheUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> cacheUserHardware(
    int? userId,
    List<_i9.Hardware>? hardware,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheUserHardware,
          [
            userId,
            hardware,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.User> getUserById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.User>);

  @override
  _i6.Future<List<_i9.Hardware>> getUserHardwareById(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserHardwareById,
          [userId],
        ),
        returnValue: _i6.Future<List<_i9.Hardware>>.value(<_i9.Hardware>[]),
      ) as _i6.Future<List<_i9.Hardware>>);

  @override
  _i6.Future<_i2.User> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i6.Future<_i2.User>);
}
